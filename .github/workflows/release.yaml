name: "Release storybook and draft gh release"

on:
  pull_request:
    branches:
      - main
    types: [closed]

env:
  TITLE: ${{ github.event.pull_request.title }}
  BODY: ${{ github.event.pull_request.body }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v3
        with:
          persist-credentials: false

      # Install Flutter
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.3.9"
          channel: "stable"

      - name: Download dependencies
        run: flutter clean && flutter pub get

      - name: Test package
        run: flutter test

  storybook:
    needs: test
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v3
        with:
          persist-credentials: false

      # Install Flutter
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.3.9"
          channel: "stable"

      - name: Build storybook
        working-directory: ./storybook
        run: |
          flutter pub get
          flutter build web --release

      # Disribute to Firebase
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_CI_SERVICE_ACCOUNT }}"
          target: "ardrive-ui"
          channelId: live

  gh-release:
    needs: test
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    steps:
      - name: "Create draft release"
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: process.env.TITLE,
                name: process.env.TITLE,
                body: process.env.BODY,
                target_commitish: 'main',
                draft: true
              });
            } catch (error) {
              core.setFailed(error.message);
            }
